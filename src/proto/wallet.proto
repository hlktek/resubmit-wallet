syntax = "proto3";

import "google/protobuf/struct.proto";

service WalletService {
    rpc createWallet (WalletUser) returns (ResponseStatus) {};

    rpc getWallet (WalletUser) returns (Wallet) {};

    rpc addMoney (WalletMoney) returns (ResponseStatus) {}; // will be remove, replace wih winAction 

    rpc reserveMoney (WalletMoney) returns (ResponseStatus) {};  // will be remove, replace with betAction

    rpc transfer (UserTransferRequest) returns (TransferResponse) {};

    rpc betAction (WalletMoney) returns (ResponseStatus) {}; // reserveMoney
    rpc buyAction (WalletMoney) returns (ResponseStatus) {};
    rpc winAction (WalletMoney) returns (ResponseStatus) {}; // addMoney
    rpc loseAction (WalletMoney) returns (ResponseStatus) {};
    rpc cancelAction (WalletMoney) returns (ResponseStatus) {};
    rpc reserveAction (WalletMoney) returns (ResponseStatus) {};
    rpc commitAction (WalletMoney) returns (ResponseStatus) {};
    rpc releaseAction (WalletMoney) returns (ResponseStatus) {};
    rpc reserveActionMultiple (WalletMoneyMultiple) returns (ResponseStatusMultiple) {};
    rpc betActionMultiple (WalletMoneyMultiple) returns (ResponseStatusMultiple) {};
    rpc winActionMultiple (WalletMoneyMultiple) returns (ResponseStatusMultiple) {};
    rpc commitActionMultiple (WalletMoneyMultiple) returns (ResponseStatusMultiple) {};
    rpc commitAndWinActionMultiple (WalletMultipleAction) returns (ResponseStatus) {};

    rpc openWalletSession(ReqOpenWalletSession) returns (ResOpenWalletSession);
    rpc betOnWalletSession(ReqActionWalletSession) returns (ResActionWalletSession);
    rpc buyOnWalletSession(ReqActionTransferWalletSession) returns (ResActionWalletSession);
    rpc winOnWalletSession(ReqActionWalletSession) returns (ResActionWalletSession);
    rpc winWithRefId(ReqWinWithRefId) returns (ResWinWithRefId);
    rpc closeWalletSession(ReqCloseWalletSession) returns (ResCloseWalletSession);
    rpc getAllWalletSession(ReqGetAllWalletSession) returns (ResGetAllWalletSession);

    rpc forceCloseWalletSession(ReqCloseWalletSession) returns (ResCloseWalletSession);
    rpc pingWalletSession(ReqPingWalletSession) returns (ResPingWalletSession);
}

message TransferResponse {
    string transactionId = 1;
    string agencyTransactionId = 2;
    double amount = 3;
    string status = 4;
    int32 errorCode = 5;
    string message = 6;
}

message UserTransferRequest {
    string userId = 1;
    repeated TransferRequest transfers = 2;
}
message TransferRequest {
    string transactionId = 1;
    string referenceId = 2;
    double amount = 3;
    string action = 4; //BET, WIN, LOSE, CANCEL, RESERVE, COMMIT, RELEASE
    TransferData data = 5;            
}
message TransferData {
    string gameId = 1; // Service Id
    string gameName = 2; // Service Name
    string gameRoundId = 3; // Playsession Id
    string gameTicketId = 4; // Command Id
    string gameTicketStatus = 5; // Pending, Running, Draw, Win, Lose, Cancel
    string gameYourBet = 6;
    double gameStake = 7;
    double gameWinLost = 8;
    double gameGain = 9;
    double gameTax = 10;
    string commitType = 11;
    double gameBetMoney = 12;
    double gameReserve = 13;
    double netTurnover = 14;
    
    string status = 16;
    string currentResult = 17;
    bool isAddOnGame = 18;
    bool isFinished = 19;
    double gameBetValue= 20;
    int64 startTime=21;
}

message ResponseStatus {
    string code = 1;
    string message = 2;
    double amount = 3;
    int64 version = 4;
}

message Wallet {
    double money = 1;
    double extraMoney = 2;
}

message WalletUser {
    string userId = 1;
    string token = 2;
}

message WalletMoney {
    string userId = 1;
    double money = 2;
    TransferData data = 16;
}

message BetMultipleData {
    double money = 1;
    TransferData data = 16;
}

message WalletMoneyMultiple {
    repeated WalletMoney walletMoney = 1;
}

message ResponseStatusDetail {
    string errorCode = 1;
    string gameTicketId = 2;
    double amount = 3;
}

message ResponseStatusMultiple {
    string code = 1;
    repeated ResponseStatusDetail details = 2;
}

message WalletMultipleAction {
    repeated WalletMoney walletCommitAction = 1;
    repeated WalletMoney walletWinAction = 2;
}

// User wallet session.
message ReqOpenWalletSession {
    string serviceId = 0;
    string serviceName = 1;
    string userId = 2;
    string gameRoundId = 3;
    double initAmount = 4;
    string initType = 5; // DUES or ALL.
    double limitMin = 6;
    double limitMax = 7;
    double timeoutInMs = 8;
    string reserveTransactionId = 9;
}

message ResOpenWalletSession {
    int32  code = 0;
    string message = 1;
    string sessionId = 2;
    double amount = 3;
    double availableAmount = 4;
    double gameAmount = 5;
    int64  version = 6;
    string reserveTransactionId = 7;
}

message ReqCloseWalletSession {
    string sessionId = 0;
}

message ResCloseWalletSession {
    int32 code = 0;
    string message = 1;
}

message ReqActionWalletSession {
    string sessionId = 0;
    double amount = 1;
}

message ReqActionTransferWalletSession {
    string sessionId = 1;
    double amount = 2;
    TransferData transferData = 3;
}

message ResActionWalletSession {
    int32 code = 0;
    string message = 1;
    double amount = 2;
    int64 version = 3;
}

message ReqGetAllWalletSession {
    int32 from = 1;
    int32 size = 2;
    int32 lastActionOverSeconds = 3; // 
    string userId = 4;
    string ticketId = 5;

}

message ResGetAllWalletSession {
    string error = 1;
    int32 from = 2;
    int32 size = 3;
    int32 total = 4;
    string userId = 5;
    string ticketId = 6;
    string data = 7;
}

message ReqPingWalletSession {
    string sessionId = 0;
}

message ResPingWalletSession {
    int32 code = 0;
    string message = 1;
}

message ReqWinWithRefId {
    string serviceId = 1;
    string serviceName = 2;
    string userId = 3;
    string gameRoundId = 4;
    double initAmount = 5;
    string initType = 6; // DUES or ALL.
    double limitMin = 7;
    double limitMax = 8;
    double timeoutInMs = 9;
    string reserveTransactionId = 10;

    double winAmount = 11;
}

message ResWinWithRefId {
    int32 code = 1;
    string message = 2;
}